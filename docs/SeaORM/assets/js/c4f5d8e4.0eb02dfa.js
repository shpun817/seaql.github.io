"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[4195],{8201:function(e,t,n){n.r(t),n.d(t,{default:function(){return F}});var a=n(7294),l=n(2582),r=n(9960),i=n(2263),c="heroBanner_1ZBZ",o="buttons_irzW",m="homepageBanner_3nvh",s="homepageLogo_25i0",d=n(7462),u=n(6010),E="features_pzNA",f=n(8307),p=[{title:"Async",icon:a.createElement(f.V5G,{size:26}),description:a.createElement(a.Fragment,null,"Relying on SQLx, SeaORM is a new library with async support from day 1.")},{title:"Dynamic",icon:a.createElement(f.Ktg,{size:26}),description:a.createElement(a.Fragment,null,"Built upon SeaQuery, SeaORM allows you to build complex queries without 'fighting the ORM'.")},{title:"Testable",icon:a.createElement(f.ZSR,{size:26}),description:a.createElement(a.Fragment,null,"Use mock connections to write unit tests for your logic.")},{title:"Service Oriented",icon:a.createElement(f.x_i,{size:26}),description:a.createElement(a.Fragment,null,"Quickly build services that join, filter, sort and paginate data in APIs.")}];function v(e){var t=e.icon,n=e.title,l=e.description;return a.createElement("div",{className:(0,u.Z)("col col--6")},a.createElement("div",{style:{paddingBottom:"20px",paddingTop:"20px"}},a.createElement("div",{style:{display:"flex"}},a.createElement("div",{style:{paddingRight:"22px"}},t),a.createElement("h3",{style:{fontSize:"20px",color:"var(--ifm-color-primary)"}},n)),a.createElement("p",null,l)))}function g(){return a.createElement("section",{className:(0,u.Z)("home-section","home-section-alt",E)},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},a.createElement("div",{className:"col col--11 col--offset-1"},a.createElement("div",{className:"row"},p.map((function(e,t){return a.createElement(v,(0,d.Z)({key:t},e))})))))))}var y="features_33En",h="tableFlexBox_2E51",b="table_3qoy";function w(){return a.createElement("section",{className:(0,u.Z)("home-section",y)},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},a.createElement("div",{className:(0,u.Z)("col col--12")},a.createElement("div",{className:"text--center padding-horiz--md"},a.createElement("h2",null,"Comparison with Diesel")))),a.createElement("div",{className:"row"},a.createElement("div",{className:h},a.createElement("table",{className:b},a.createElement("tr",null,a.createElement("th",{width:"50%"},"SeaORM"),a.createElement("th",{width:"50%"},"Diesel")),a.createElement("tr",null,a.createElement("td",null,"Async"),a.createElement("td",null,"Sync")),a.createElement("tr",null,a.createElement("td",null,"Dynamic"),a.createElement("td",null,"Static")),a.createElement("tr",null,a.createElement("td",null,"Pure Rust"),a.createElement("td",null,"Native Driver")),a.createElement("tr",null,a.createElement("td",{colSpan:"2"},"Relational")),a.createElement("tr",null,a.createElement("td",{colSpan:"2"},"Schema First")),a.createElement("tr",null,a.createElement("td",{colSpan:"2"},"MySQL / Postgres / SQLite")))))))}var _=n(6396),N=n(8215),k=n(3746),S=n(5350),M=n(7410);(void 0!==n.g?n.g:window).Prism=M.default,n(767);var x=[{title:"Entity",code:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}'},{title:"Select",code:'// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n    .filter(cake::Column::Name.contains("chocolate"))\n    .all(db)\n    .await?;\n\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n    Cake::find().find_with_related(Fruit).all(db).await?;'},{title:"Insert",code:'let apple = fruit::ActiveModel {\n    name: Set("Apple".to_owned()),\n    ..Default::default() // no need to set primary key\n};\n\nlet pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default()\n};\n\n// insert one\nlet pear: fruit::Model = pear.insert(db).await?;\n\n// insert many\nFruit::insert_many(vec![apple, pear]).exec(db).await?;'},{title:"Update",code:'use sea_orm::sea_query::{Expr, Value};\n\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\n\npear.name = Set("Sweet pear".to_owned());\n\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n\n// update many: UPDATE "fruit" SET "cake_id" = NULL WHERE "fruit"."name" LIKE \'%Apple%\'\nFruit::update_many()\n    .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n    .filter(fruit::Column::Name.contains("Apple"))\n    .exec(db)\n    .await?;'},{title:"Save",code:'let banana = fruit::ActiveModel {\n    id: NotSet,\n    name: Set("Banana".to_owned()),\n    ..Default::default()\n};\n\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\n\nbanana.name = Set("Banana Mongo".to_owned());\n\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;'},{title:"Delete",code:'// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n    .exec(db)\n    .await?;\n\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n\n// delete many: DELETE FROM "fruit" WHERE "fruit"."name" LIKE \'Orange\'\nfruit::Entity::delete_many()\n    .filter(fruit::Column::Name.contains("Orange"))\n    .exec(db)\n    .await?;'}];function R(){var e=(0,i.Z)().siteConfig.themeConfig.prism,t=void 0===e?{}:e,n=(0,a.useState)(!1),l=n[0],r=n[1];(0,a.useEffect)((function(){r(!0)}),[]);var c=(0,S.Z)().isDarkTheme,o=t.theme,m=t.darkTheme||o,s=c?m:o;return a.createElement("section",{className:(0,u.Z)("home-section","home-section-alt",y)},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},a.createElement("div",{className:(0,u.Z)("col col--12")},a.createElement("div",{className:"padding-horiz--md"},a.createElement("h2",{className:"text--center"},"A quick taste of SeaORM"),a.createElement(_.Z,{className:(0,u.Z)("aa"),defaultValue:x[0].title,values:x.map((function(e){var t=e.title;e.code;return{label:t,value:t}}))},x.map((function(e,t){var n=e.title,r=e.code;return a.createElement(N.Z,{key:t,value:n},a.createElement(k.ZP,(0,d.Z)({},k.lG,{code:r,key:l,theme:s,language:"rust"}),(function(e){var t=e.className,n=e.tokens,l=e.getLineProps,r=e.getTokenProps;return a.createElement("pre",{className:""+t,style:{backgroundColor:c?"#111":"#fff"}},n.map((function(e,t){return a.createElement("div",l({line:e,key:t}),e.map((function(e,t){return a.createElement("span",r({token:e,key:t}))})))})))})))}))))))))}var Z="features_1xtU",C="mascot_3kil";function O(){return a.createElement("section",{className:(0,u.Z)("home-section",Z)},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},a.createElement("div",{className:(0,u.Z)("col col--12")},a.createElement("h2",{className:"text--center"},"Meet Terres, our official mascot"),a.createElement("p",{className:"text--center"},"A friend of ",a.createElement("a",{href:"https://www.rustacean.net/"},"Ferris"),", Terres the hermit crab is a member of the Rustacean family."),a.createElement("div",{className:"text--center padding-horiz--md"},a.createElement("img",{className:C,src:"/SeaORM/img/Terres.png"}))))))}function D(){var e=(0,i.Z)().siteConfig;return a.createElement("header",{className:c},a.createElement("div",{className:"container"},a.createElement("img",{className:s,width:"90%",src:"/SeaORM/img/SeaORM logo.png"}),a.createElement("img",{className:m,width:"90%",src:"/SeaORM/img/SeaORM banner.png"}),a.createElement("h2",{className:"hero__subtitle"},e.tagline),a.createElement("div",{className:o},a.createElement(r.Z,{className:"button button--primary button--lg",to:"/docs/index"},"Getting Started"))))}function F(){var e=(0,i.Z)().siteConfig;return a.createElement(l.Z,{description:e.tagline},a.createElement(D,null),a.createElement("main",null,a.createElement(g,null),a.createElement(w,null),a.createElement(R,null),a.createElement(O,null)))}}}]);