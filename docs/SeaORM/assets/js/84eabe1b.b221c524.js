"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[4449],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,y=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(y,o(o({ref:n},s),{},{components:t})):r.createElement(y,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2065:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],u={},l="Raw SQL",c={unversionedId:"basic-crud/raw-sql",id:"version-0.5.x/basic-crud/raw-sql",title:"Raw SQL",description:"Query by raw SQL",source:"@site/versioned_docs/version-0.5.x/05-basic-crud/07-raw-sql.md",sourceDirName:"05-basic-crud",slug:"/basic-crud/raw-sql",permalink:"/SeaORM/docs/0.5.x/basic-crud/raw-sql",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.5.x/05-basic-crud/07-raw-sql.md",tags:[],version:"0.5.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1651736158,formattedLastUpdatedAt:"5/5/2022",sidebarPosition:7,frontMatter:{},sidebar:"version-0.5.x/tutorialSidebar",previous:{title:"JSON",permalink:"/SeaORM/docs/0.5.x/basic-crud/json"},next:{title:"One to One",permalink:"/SeaORM/docs/0.5.x/relation/one-to-one"}},s=[{value:"Query by raw SQL",id:"query-by-raw-sql",children:[],level:2},{value:"Get raw SQL query",id:"get-raw-sql-query",children:[],level:2},{value:"Use Raw Query &amp; Execute Interface",id:"use-raw-query--execute-interface",children:[{value:"Get Custom Result using <code>query_one</code> and <code>query_all</code> methods",id:"get-custom-result-using-query_one-and-query_all-methods",children:[],level:3},{value:"Execute Query using <code>execute</code> method",id:"execute-query-using-execute-method",children:[],level:3}],level:2}],d={toc:s};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"raw-sql"},"Raw SQL"),(0,i.kt)("h2",{id:"query-by-raw-sql"},"Query by raw SQL"),(0,i.kt)("p",null,"You can select ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," from raw query, with appropriate syntax for binding parameters, i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," for MySQL and SQLite, and ",(0,i.kt)("inlineCode",{parentName:"p"},"$N")," for PostgreSQL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let cheese: Option<cake::Model> = cake::Entity::find()\n    .from_raw_sql(Statement::from_sql_and_values(\n        DbBackend::Postgres,\n        r#"SELECT "cake"."id", "cake"."name" FROM "cake" WHERE "id" = $1"#,\n        vec![1.into()],\n    ))\n    .one(&db)\n    .await?;\n')),(0,i.kt)("p",null,"You can also select a custom model. Here, we select all unique names from cake."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, FromQueryResult)]\npub struct UniqueCake {\n    name: String,\n}\n\nlet unique: Vec<UniqueCake> = UniqueCake::find_by_statement(Statement::from_sql_and_values(\n        DbBackend::Postgres,\n        r#"SELECT "cake"."name" FROM "cake" GROUP BY "cake"."name"#,\n        vec![],\n    ))\n    .all(&db)\n    .await?;\n')),(0,i.kt)("h2",{id:"get-raw-sql-query"},"Get raw SQL query"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"to_string")," methods on any CRUD operations to get the database-specific raw SQL for debugging purposes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::DatabaseBackend;\n\nassert_eq!(\n    cake_filling::Entity::find_by_id((6, 8))\n        .build(DatabaseBackend::MySql)\n        .to_string(),\n    vec![\n        "SELECT `cake_filling`.`cake_id`, `cake_filling`.`filling_id` FROM `cake_filling`",\n        "WHERE `cake_filling`.`cake_id` = 6 AND `cake_filling`.`filling_id` = 8",\n    ].join(" ")\n);\n')),(0,i.kt)("h2",{id:"use-raw-query--execute-interface"},"Use Raw Query & Execute Interface"),(0,i.kt)("p",null,"You can build SQL statements using ",(0,i.kt)("inlineCode",{parentName:"p"},"sea-query")," and query / execute it directly on the ",(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseConnection")," interface inside SeaORM."),(0,i.kt)("h3",{id:"get-custom-result-using-query_one-and-query_all-methods"},"Get Custom Result using ",(0,i.kt)("inlineCode",{parentName:"h3"},"query_one")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"query_all")," methods"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let query_res: Option<QueryResult> = db\n    .query_one(Statement::from_string(\n        DatabaseBackend::MySql,\n        "SELECT * FROM `cake`;".to_owned(),\n    ))\n    .await?;\nlet query_res = query_res.unwrap();\nlet id: i32 = query_res.try_get("", "id")?;\n\nlet query_res_vec: Vec<QueryResult> = db\n    .query_all(Statement::from_string(\n        DatabaseBackend::MySql,\n        "SELECT * FROM `cake`;".to_owned(),\n    ))\n    .await?;\n')),(0,i.kt)("h3",{id:"execute-query-using-execute-method"},"Execute Query using ",(0,i.kt)("inlineCode",{parentName:"h3"},"execute")," method"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let exec_res: ExecResult = db\n    .execute(Statement::from_string(\n        DatabaseBackend::MySql,\n        "DROP DATABASE IF EXISTS `sea`;".to_owned(),\n    ))\n    .await?;\nassert_eq!(exec_res.rows_affected(), 1);\n')))}p.isMDXComponent=!0}}]);